import java.awt.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import javax.swing.*;

public class GroupBooleanCounter {
    private static JFrame mainFrame;
    private static CardLayout cardLayout;
    private static JPanel cardPanel;
    private static JLabel trueCountLabel;
    private static JLabel falseCountLabel;
    private static JLabel totalBooleansLabel;
    private static JLabel resultsTitleLabel;

    public static void main(String[] args) {
        if (args.length > 0) {
            runConsoleMode(args[0]);
        } else {
            SwingUtilities.invokeLater(GroupBooleanCounter::runGuiMode);
        }
    }

    private static void runConsoleMode(String filePath) {
        try {
            Map<String, Integer> results = BooleanCounterEngine.processCSVFile(filePath);
            printConsoleResults(results);
        } catch (IOException | IllegalArgumentException e) {
            System.err.println("Error: " + e.getMessage());
        }
    }

    private static void printConsoleResults(Map<String, Integer> results) {
        int trueCount = results.getOrDefault("True Count", 0);
        int falseCount = results.getOrDefault("False Count", 0);
        int total = trueCount + falseCount;
        
        System.out.println("True Count: " + trueCount);
        System.out.println("False Count: " + falseCount);
        System.out.println("Total Booleans: " + total);
    }

    private static void runGuiMode() {
        // Set modern look and feel
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        mainFrame = new JFrame("Boolean Counter");
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainFrame.setPreferredSize(new Dimension(1024, 768));
        
        cardLayout = new CardLayout();
        cardPanel = new JPanel(cardLayout);
        cardPanel.add(createTitlePanel(), "title");
        cardPanel.add(createResultsPanel(), "results");
        
        mainFrame.add(cardPanel);
        mainFrame.pack();
        mainFrame.setExtendedState(JFrame.MAXIMIZED_BOTH);
        mainFrame.setVisible(true);
    }

    private static JPanel createTitlePanel() {
        JPanel panel = new JPanel(new GridBagLayout());
        panel.setBackground(new Color(240, 245, 250)); // Light blue background
        
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridwidth = GridBagConstraints.REMAINDER;
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.insets = new Insets(15, 20, 15, 20);

        // Title with shadow effect
        JLabel titleLabel = createStyledLabel("Boolean Counter", 52, Font.BOLD);
        panel.add(titleLabel, gbc);

        // Subtitle
        JLabel creatorLabel = createStyledLabel("Created by Hoby Josol", 26, Font.ITALIC);
        creatorLabel.setForeground(new Color(100, 100, 100));
        panel.add(creatorLabel, gbc);

        // Description and instructions
        String htmlContent = "<html><div style='text-align: center; width: 700px;'>"
                + "<p style='font-size: 20px; margin: 20px 0;'>"
                + "Welcome to the Boolean Counter! This application analyzes CSV files "
                + "and counts the occurrences of 'true' and 'false' values.</p>"
                + "<div style='background-color: #f8f9fa; padding: 20px; border-radius: 10px;'>"
                + "<p style='font-size: 22px; color: #2c3e50;'><b>Instructions:</b></p>"
                + "<ol style='font-size: 18px; text-align: left;'>"
                + "<li>Click the highlighted <b>'Upload CSV'</b> button below</li>"
                + "<li>Select your CSV file containing boolean values</li>"
                + "<li>View the analysis results showing true/false counts</li>"
                + "<li>Use the 'Back to Main' button to analyze another file</li>"
                + "</ol></div></html>";

        JLabel descriptionLabel = new JLabel(htmlContent);
        panel.add(descriptionLabel, gbc);

        // Upload button with enhanced styling
        JButton uploadButton = createStyledButton("Upload CSV");
        panel.add(uploadButton, gbc);

        return panel;
    }

    private static JLabel createStyledLabel(String text, int size, int style) {
        JLabel label = new JLabel(text);
        label.setFont(new Font("Segoe UI", style, size));
        return label;
    }

    private static JButton createStyledButton(String text) {
        JButton button = new JButton(text);
        button.setFont(new Font("Segoe UI", Font.BOLD, 24));
        button.setPreferredSize(new Dimension(300, 80));
        button.setBackground(new Color(0, 123, 255)); // Bootstrap primary blue
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createCompoundBorder(
            BorderFactory.createLineBorder(new Color(0, 86, 179), 2),
            BorderFactory.createEmptyBorder(10, 25, 10, 25)
        ));
        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        button.addActionListener(e -> handleFileUpload(button));

        // Hover effects
        button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(0, 105, 217));
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                button.setBackground(new Color(0, 123, 255));
            }
        });

        return button;
    }

    // ... [Rest of the code remains the same] ...
}
